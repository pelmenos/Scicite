# Generated by Django 4.2.1 on 2024-08-15 16:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('balance', models.PositiveIntegerField(default=0, verbose_name='Баланс')),
                ('number_phone', models.CharField(max_length=15, unique=True, verbose_name='номером телефона')),
                ('login', models.CharField(max_length=32, unique=True, verbose_name='логином')),
                ('is_active', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('new_email', models.EmailField(max_length=254)),
                ('full_name', models.CharField(max_length=60, null=True, verbose_name='Полное имя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(verbose_name='Название уровня')),
                ('name_ru', models.TextField(null=True, verbose_name='Название уровня')),
                ('name_en', models.TextField(null=True, verbose_name='Название уровня')),
                ('limit', models.PositiveIntegerField(default=0, verbose_name='Доступное количество откликов на цитирование за месяц')),
                ('count_offers', models.IntegerField(default=0, verbose_name='Кол-во публикаций для перехода на следующий уровень')),
            ],
            options={
                'verbose_name': 'Уровень аккаунта пользователя',
                'verbose_name_plural': 'Уровни аккаунта пользователя',
                'db_table': 'levels',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=256, verbose_name='Описание')),
                ('code', models.TextField(default=0, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Право',
                'verbose_name_plural': 'Права',
                'db_table': 'permission',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(verbose_name='Название роли')),
                ('description', models.CharField(max_length=256, verbose_name='Описание роли')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='SettingsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('welcome_bonus', models.IntegerField(default=0, verbose_name='Приветственный бонус')),
                ('price_publication', models.JSONField(default={'scopus/wos': 160, 'вак': 80, 'ринц': 40}, verbose_name='Стоимость публикации')),
                ('discount', models.JSONField(default={'enabled': True, 'month': 6, 'percent': 20}, verbose_name='Скидка на публикацию')),
                ('price_citation', models.JSONField(default={'scopus/wos': 200, 'вак': 100, 'ринц': 50}, verbose_name='Оплата цитирования')),
                ('scicoins', models.JSONField(default={'discount': 1000, 'percent': 20, 'price': 2}, verbose_name='Scicoins')),
                ('minimal_duration_card', models.IntegerField(default=3, verbose_name='Мин. длит. карточки')),
                ('free_card', models.JSONField(default={'duration': 6, 'enabled': True})),
            ],
            options={
                'db_table': 'settings',
            },
        ),
        migrations.CreateModel(
            name='Transacitons',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sum', models.IntegerField(default=0, verbose_name='Сумма')),
                ('balance', models.IntegerField(default=0, verbose_name='Установленный баланс')),
                ('type_transaction', models.TextField(choices=[('plus', 'Пополнение'), ('minus', 'Списание')], default='plus')),
                ('canceled_is', models.BooleanField(default=False, verbose_name='Отмена транзакции')),
                ('basis_creation', models.TextField(choices=[('create_card', 'Создание карточки'), ('citation_format', 'Оформление цитирования'), ('publication_format', 'Оформление публикации'), ('enrollment_admin', 'Зачисление Admin'), ('achievement', 'Получение достижения'), ('start_bonus', 'Стартовый бонус'), ('card_up', 'Продление карточке')])),
                ('source', models.JSONField(default={})),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'ordering': ['created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles_app.permission', verbose_name='Роль')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles_app.role', verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'role_permission',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('message_ru', models.TextField(null=True, verbose_name='Сообщение')),
                ('message_en', models.TextField(null=True, verbose_name='Сообщение')),
                ('object_id', models.UUIDField(null=True, verbose_name='ИД объекта')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('is_active', models.BooleanField(default=True, verbose_name='Удаленая запись')),
                ('link', models.TextField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('count_created_cards', models.IntegerField(default=0, verbose_name='Кол-во созданных карточек')),
                ('count_created_offers', models.IntegerField(default=0, verbose_name='Кол-во созданных откликов')),
                ('count_get_offers', models.IntegerField(default=0, verbose_name='Кол-во полученных откликов')),
                ('count_publication', models.IntegerField(default=0, verbose_name='Кол-во публикаций')),
                ('count_citation', models.IntegerField(default=0, verbose_name='Кол-во цитат')),
                ('count_created_citation', models.IntegerField(default=0, verbose_name='Кол-во созданных цитат')),
                ('count_barters', models.IntegerField(default=0, verbose_name='Кол-во бартеров')),
                ('count_reject', models.IntegerField(default=0, verbose_name='Кол-во отказов полученных')),
                ('count_created_barters', models.IntegerField(default=0, verbose_name='Кол-во бартеров созданных')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Счетчик пользователя',
                'verbose_name_plural': 'Счетчики пользвоателей',
                'db_table': 'user_counter',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='level',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='profiles_app.levels'),
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='profiles_app.role', verbose_name='Роли'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achievement', models.CharField(choices=[('registration', 'Регистрация'), ('first_card', 'Первая карточка'), ('first_offer', 'Первый отклик'), ('first_quote', 'Первое цитирование'), ('first_publication', 'Первое публикация')], max_length=20, verbose_name='Достижение')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Достижение пользователя',
                'verbose_name_plural': 'Достижения пользователей',
                'db_table': 'user_achievements',
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
